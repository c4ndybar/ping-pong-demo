service: ping-pong-demo
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  memorySize: 128
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:*:*:*

functions:
  app:
    handler: src/lambda.api
    events: 
      - http: 
          path: /
          method: ANY
          cors: true
      - http: 
          path: /{proxy+}
          method: ANY
          cors: true
  gameChangedStreamHandler:
    handler: src/lambda.gameChangedHandler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - gamesTable
              - StreamArn
          batchSize: 1
          maximumRetryAttempts: 2

resources:
  Resources:
    playersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: players
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    gamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: games
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE